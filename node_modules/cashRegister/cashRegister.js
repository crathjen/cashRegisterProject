function Account(a,b){
	var accountName = b||"default";
	var startingBalance=a;
	var transactions=[];
	var currentBalance=a;
	
	Object.defineProperties(this,{
		accountName :{
			get: function(){return accountName},
			set: function(val){accountName=val},
			enumerable: true
		},
		startingBalance :{
			get: function(){return startingBalance},
			set: function(val){startingBalance=val}
		},
		transactions :{
			get: function(){return transactions},
			set: function(val){transactions=val}
		},
		currentBalace :{
			get: function(){return currentBalance},
			set: function(val){currentBalance=val}
		}
		});
} //end: fn
Account.initializeAccount=function(balance, acctname){
	var tempacct=new Account(balance, acctname);
	return tempacct;
}
Account.loadJSON=function(jsondata){
	
}
Account.prototype.saveToJSON=function(){
	
}
Account.prototype.calculateBalance=function(){
	var workingSum=this.startingBalance;
	for (var i=0; i<this.transactions.length;i++){
		workingSum+=this.transactions[i].amount;
	} //end: for
	this.currentBalance= workingSum;
} //end: fn
Account.prototype.depositTransaction=function(depAmount){
	var temptx=new Transaction(depAmount);
	this.transactions.push(temptx);
	this.currentBalance+=depAmount;
} //end: fn
Account.prototype.withdrawalTransaction=function(depAmount){
	var temptx=new Transaction(depAmount);
	this.transactions.push(temptx);
	this.currentBalance-=depAmount;
} //end: fn
Account.prototype.minBalanceAlert = function(currentBalance) {
    console.log("Notice: This current balance is below $100. The current balance is: "
    + currentBalance);
} //end: fn

function Transaction(amt, date){
	if (typeof amt == "number")
	this.amount=amt;
	this.id=Transaction.idCounter++;

	this.date=date;
	this.type;
	this.memo;
}
Transaction.idCounter=0;

exports.Account = Account;
exports.Transaction = Transaction;
var a=new Account(45)
console.log(new Account(45))
NaN