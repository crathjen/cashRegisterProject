define(["subscribers"],function (subscribers){
	/*
	ACCOUNT
	 */
	/**
	 * [Account Constructor]
	 * @class Account
	 * @param {[type]} a [description]
	 * @param {[type]} b [description]
	 */
	function Account(a,b) {
		/*
		self-invoking constructor
		 */
		if (!(this instanceof Account)) {
			return new Account(a, b);
		} //end: if
		var accountName = b||"default";
		var startingBalance = a;
		var transactions = [];
		var currentBalance = a;
		/*
		encapsulation with accessors
		 */
		Object.defineProperties(this,{
			accountName: {
				get: function() {return accountName;},
				set: function(val) {accountName = val;}
			},
			startingBalance: {
				get: function() {return startingBalance;},
				set: function(val) {startingBalance = val;}
			},
			transactions: {
				get: function() {return transactions;},
				set: function(val) {transactions = val;}
			},
			currentBalance: {
				get: function() {return currentBalance;},
				set: function(val) {currentBalance = val;}
			}
			});
			subscribers.makePublisher(this);
	} //end: constr

	Account.initializeAccount=function(startBalance, acctName) {
		var tempAcct = new Account (startBalance, acctName);
		return tempAcct;
	};//end:fn

	Account.prototype.calculateBalance = function() {
		var workingSum = this.startingBalance;
		for (var i = 0; i < this.transactions.length; i += 1){
			workingSum += this.transactions[i].amount;
		} //end: for
		this.currentBalance = workingSum;
		// console.log(this.currentBalance);
		// console.log(workingSum);
	};//end: fn

	Account.prototype.addTransaction = function(amount, date, type, memo) {
		var tempDepositTransaction = new Transaction();

		// this.transactions.push(temptx);
		 	if (typeof amount === "number") {
		 		tempDepositTransaction.amount = amount;
			}//end if
			if (typeof date === "string") {
				tempDepositTransaction.date = date;
			}//end if
			if (typeof type === "string") {
				tempDepositTransaction.type = type;
			}//end if
			if (typeof memo === "string") {
				tempDepositTransaction.memo = memo;
			}//end if
			/*
			Add new tempDepositTransaction to Account transactions List
			 */
			this.transactions.push(tempDepositTransaction);
			this.calculateBalance();
			this.notify('change', tempDepositTransaction);


	};//end: fn

	Account.prototype.minBalanceAlert = function(currentBalance) {
	    console.log("Notice: This current balance is below $100. The current balance is: " +
					currentBalance + ".");
	};//end: fn

	Account.loadJSON = function(jsonData) {
		var tempAccount = new Account();
		tempAccount.accountName = jsonData.accountName;
		tempAccount.startingBalance = jsonData.startingBalance;

		for (var i = 0; i < jsonData.transactions.length; i += 1) {
			var tempTransaction = new Transaction();
			tempTransaction.amount = jsonData.transactions[i].amount;
			tempTransaction.date = jsonData.transactions[i].date;
			tempTransaction.type = jsonData.transactions[i].type;
			tempTransaction.memo = jsonData.transactions[i].memo;

			tempAccount.transactions[i] = tempTransaction;
		}//end: for

		tempAccount.currentBalance = jsonData.currentBalance;

		return tempAccount;
	};//end:fn

	/*
	re-format Account obj to make avail for JSON.stringify
	 */
	Account.prototype.toJSON = function() {
		return {
			accountName: this.accountName,
			startingBalance: this.startingBalance,
			transactions: this.transactions,
			currentBalance: this.currentBalance
		};
	};//end:fn

	/*
	modify js toString for console.log()
	 */
	Account.prototype.toString = function() {
		return "(" + this.accountName + ", " + this.startingBalance + ", " +
				this.transactions + ", " + this.currentBalance + ")";
	};//end: fn

	/*
	TRANSACTION
	 */
	 /**
	  * [Transaction constructor]
	  * @constructor
	  * @param {[type]} amt  [description]
	  * @param {[type]} date [description]
	  */
	 function Transaction(amt, date, type, memo) {
	 	/*
	 	self-invoking constructor
	 	 */
	 	if (!(this instanceof Transaction)) {
	 		return new Account(amt, date, type, memo);
	 	} //end: if
	 	if (typeof amt === "number") {
	 	var amount = amt;
	 	var id = Transaction.idCounter++;

	 	var date = date;
	 	var type = type;
	 	var memo = memo;
		}//end: if

		/*
		encapsulation with accessors
		 */
		Object.defineProperties(this,{
			amount: {
				get: function() {return amount;},
				set: function(val) {amount = val;}
			},
			id: {
				get: function() {return id;}
				// set: function(val) {id = val;}
			},
			date: {
				get: function() {return date;},
				set: function(val) {date = val;}
			},
			type: {
				get: function() {return type;},
				set: function(val) {type = val;}
			},
			memo: {
				get: function() {return memo;},
				set: function(val) {memo = val;}
			}
			});
	 }//end: constr

	 /*
	 re-format Transaction obj to make avail for JSON.stringify
	  */
	 Transaction.prototype.toJSON = function() {
		 return {
			 amount: this.amount,
			 id: this.id,
			 date: this.date,
			 type: this.type,
			 memo: this.memo
		 };
	 };//end:fn

	/*
	modify js toString for console.log()
	 */
	Transaction.prototype.toString = function() {
		return "(" + this.id + ", " + this.date + ", " + this.type +
				", " + this.memo + ")";
	};//end: fn


	Transaction.idCounter=0;

	//exports.Account = Account;
	//exports.Transaction = Transaction;

	/*
	TESTING
	 */

	var testTransaction1 = new Transaction(3, 2015, 'CC', 'carrots');
	var testTransaction2 = new Transaction(50, 2015, 'CC', 'Grey Goose');
	var testTransaction3 = new Transaction(100, 2015, 'CK', "steaks");

	var jsonAcct = new Account();
	jsonAcct.accountName = 'coleChecking';
	jsonAcct.startingBalance = 1000;
	jsonAcct.transactions.push(testTransaction1);
	jsonAcct.transactions.push(testTransaction2);
	jsonAcct.transactions.push(testTransaction3);

	jsonAcct.addTransaction(75, 2015, 'ck', 'transactionFunctionTest');
	jsonAcct.calculateBalance();

	jsonAcct.subscribe();



	var testJSON = JSON.stringify(jsonAcct);
	console.log(JSON.stringify(jsonAcct));
	var reconstitutedJSON = Account.loadJSON(JSON.parse(testJSON));
	JSON.stringify(reconstitutedJSON);
	console.log(JSON.stringify(reconstitutedJSON));

	return {
		Account : Account,
		Transaction : Transaction
	};
});
