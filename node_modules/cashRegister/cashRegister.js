
var a = "hello node and vscode"
console.log(a);

function Account(b){
	this.accountName = "default";
	this.startingBalance=b;
	this.transactions=[];
	this.currentBalance=b;
} //end: fn

Account.loadJSON=function(jsondata){
	
}
Account.prototype.saveToJSON=function(){
	
}
Account.prototype.calculateBalance=function(){
	var workingSum=this.startingBalance;
	for (var i=0; i<this.transactions.length;i++){
		workingSum+=this.transactions[i].amount;
	} //end: for
	this.currentBalance= workingSum;
} //end: fn
Account.prototype.depositTransaction=function(depAmount){
	var temptx=new Transaction(depAmount);
	this.transactions.push(temptx);
	this.currentBalance+=depAmount;
} //end: fn
Account.prototype.withdrawalTransaction=function(depAmount){
	var temptx=new Transaction(depAmount);
	this.transactions.push(temptx);
	this.currentBalance-=depAmount;
} //end: fn
Account.prototype.minBalanceAlert = function(currentBalance) {
    console.log("Notice: This current balance is below $100. The current balance is: "
    + currentBalance);
} //end: fn

function Transaction(amt, date){
	if (typeof amt == "number")
	this.amount=amt;
	this.id=Transaction.idCounter++;

	this.date=date;
	this.type;
	this.memo;
}
Transaction.idCounter=0;

var testAccount = new Account(2000);
testAccount.depositTransaction(45);
testAccount.depositTransaction(20);
testAccount.withdrawalTransaction(30);
console.log(testAccount.currentBalance);
console.log(new Transaction(8).id);

/*var testTransaction = new Transaction(45);
testAccount.transactions.push(testTransaction);
var testTransaction2 = new Transaction(-75);
testAccount.transactions.push(testTransaction2);
testAccount.transactions.pop();
â€‹
testAccount.calculateBalance();*/

//exports
exports.Account = Account;
exports.Transaction = Transaction;

console.log(new Transaction(8).id);
