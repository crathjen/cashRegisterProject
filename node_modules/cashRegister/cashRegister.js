/**
 * [Account Constructor]
 * @class Account
 * @param {[type]} a [description]
 * @param {[type]} b [description]
 */
function Account(a,b) {
	/*
	self-invoking constructor
	 */
	if (!(this instanceof Account)) {
		return new Account(a, b);
	} //end: if
	var accountName = b||"default";
	var startingBalance=a;
	var transactions=[];
	var currentBalance=a;
	/*
	encapsulation with accessors
	 */
	Object.defineProperties(this,{
		accountName: {
			get: function(){return accountName},
			set: function(val){accountName=val}
		}
		, startingBalance: {
			get: function(){return startingBalance},
			set: function(val){startingBalance=val}
		}
		, transactions: {
			get: function(){return transactions},
			set: function(val){transactions=val}
		}
		, currentBalace: {
			get: function(){return currentBalance},
			set: function(val){currentBalance=val}
		}
		});
} //end: constr

/**
 * [Transaction constructor]
 * @constructor
 * @param {[type]} amt  [description]
 * @param {[type]} date [description]
 */
function Transaction(amt, date) {
	/*
	self-invoking constructor
	 */
	if (!(this instanceof Transaction)) {
		return new Account(amt, date);
	} //end: if
	if (typeof amt == "number")
	this.amount=amt;
	this.id=Transaction.idCounter++;

	this.date=date;
	this.type;
	this.memo;
}//end: constr

Account.initializeAccount=function(balance, acctname) {
	var tempacct=new Account(balance, acctname);
	return tempacct;
}//end:fn

Account.loadJSON=function(jsondata) {

}//end:fn

Account.prototype.saveToJSON=function() {

}//end:fn

Account.prototype.calculateBalance=function() {
	var workingSum=this.startingBalance;
	for (var i=0; i<this.transactions.length;i++){
		workingSum+=this.transactions[i].amount;
	} //end: for
	this.currentBalance= workingSum;
}//end: fn

Account.prototype.depositTransaction=function(depAmount) {
	var temptx=new Transaction(depAmount);
	this.transactions.push(temptx);
	this.currentBalance+=depAmount;
}//end: fn

Account.prototype.withdrawalTransaction=function(depAmount) {
	var temptx=new Transaction(depAmount);
	this.transactions.push(temptx);
	this.currentBalance-=depAmount;
}//end: fn

Account.prototype.minBalanceAlert = function(currentBalance) {
    console.log("Notice: This current balance is below $100. The current balance is: "
				+ currentBalance + ".");
}//end: fn

Transaction.idCounter=0;

exports.Account = Account;
exports.Transaction = Transaction;
